// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/operator/v1"
)

// ConfigSpecApplyConfiguration represents an declarative configuration of the ConfigSpec type for use
// with apply.
type ConfigSpecApplyConfiguration struct {
	ManagementState     *v1.ManagementState `json:"managementState,omitempty"`
	SamplesRegistry     *string             `json:"samplesRegistry,omitempty"`
	Architectures       []string            `json:"architectures,omitempty"`
	SkippedImagestreams []string            `json:"skippedImagestreams,omitempty"`
	SkippedTemplates    []string            `json:"skippedTemplates,omitempty"`
}

// ConfigSpecApplyConfiguration constructs an declarative configuration of the ConfigSpec type for use with
// apply.
func ConfigSpec() *ConfigSpecApplyConfiguration {
	return &ConfigSpecApplyConfiguration{}
}

// WithManagementState sets the ManagementState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManagementState field is set to the value of the last call.
func (b *ConfigSpecApplyConfiguration) WithManagementState(value v1.ManagementState) *ConfigSpecApplyConfiguration {
	b.ManagementState = &value
	return b
}

// WithSamplesRegistry sets the SamplesRegistry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SamplesRegistry field is set to the value of the last call.
func (b *ConfigSpecApplyConfiguration) WithSamplesRegistry(value string) *ConfigSpecApplyConfiguration {
	b.SamplesRegistry = &value
	return b
}

// WithArchitectures adds the given value to the Architectures field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Architectures field.
func (b *ConfigSpecApplyConfiguration) WithArchitectures(values ...string) *ConfigSpecApplyConfiguration {
	for i := range values {
		b.Architectures = append(b.Architectures, values[i])
	}
	return b
}

// WithSkippedImagestreams adds the given value to the SkippedImagestreams field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SkippedImagestreams field.
func (b *ConfigSpecApplyConfiguration) WithSkippedImagestreams(values ...string) *ConfigSpecApplyConfiguration {
	for i := range values {
		b.SkippedImagestreams = append(b.SkippedImagestreams, values[i])
	}
	return b
}

// WithSkippedTemplates adds the given value to the SkippedTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SkippedTemplates field.
func (b *ConfigSpecApplyConfiguration) WithSkippedTemplates(values ...string) *ConfigSpecApplyConfiguration {
	for i := range values {
		b.SkippedTemplates = append(b.SkippedTemplates, values[i])
	}
	return b
}
