// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/operator/v1"
)

// ConfigStatusApplyConfiguration represents an declarative configuration of the ConfigStatus type for use
// with apply.
type ConfigStatusApplyConfiguration struct {
	ManagementState     *v1.ManagementState                 `json:"managementState,omitempty"`
	Conditions          []ConfigConditionApplyConfiguration `json:"conditions,omitempty"`
	SamplesRegistry     *string                             `json:"samplesRegistry,omitempty"`
	Architectures       []string                            `json:"architectures,omitempty"`
	SkippedImagestreams []string                            `json:"skippedImagestreams,omitempty"`
	SkippedTemplates    []string                            `json:"skippedTemplates,omitempty"`
	Version             *string                             `json:"version,omitempty"`
}

// ConfigStatusApplyConfiguration constructs an declarative configuration of the ConfigStatus type for use with
// apply.
func ConfigStatus() *ConfigStatusApplyConfiguration {
	return &ConfigStatusApplyConfiguration{}
}

// WithManagementState sets the ManagementState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManagementState field is set to the value of the last call.
func (b *ConfigStatusApplyConfiguration) WithManagementState(value v1.ManagementState) *ConfigStatusApplyConfiguration {
	b.ManagementState = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ConfigStatusApplyConfiguration) WithConditions(values ...*ConfigConditionApplyConfiguration) *ConfigStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithSamplesRegistry sets the SamplesRegistry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SamplesRegistry field is set to the value of the last call.
func (b *ConfigStatusApplyConfiguration) WithSamplesRegistry(value string) *ConfigStatusApplyConfiguration {
	b.SamplesRegistry = &value
	return b
}

// WithArchitectures adds the given value to the Architectures field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Architectures field.
func (b *ConfigStatusApplyConfiguration) WithArchitectures(values ...string) *ConfigStatusApplyConfiguration {
	for i := range values {
		b.Architectures = append(b.Architectures, values[i])
	}
	return b
}

// WithSkippedImagestreams adds the given value to the SkippedImagestreams field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SkippedImagestreams field.
func (b *ConfigStatusApplyConfiguration) WithSkippedImagestreams(values ...string) *ConfigStatusApplyConfiguration {
	for i := range values {
		b.SkippedImagestreams = append(b.SkippedImagestreams, values[i])
	}
	return b
}

// WithSkippedTemplates adds the given value to the SkippedTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SkippedTemplates field.
func (b *ConfigStatusApplyConfiguration) WithSkippedTemplates(values ...string) *ConfigStatusApplyConfiguration {
	for i := range values {
		b.SkippedTemplates = append(b.SkippedTemplates, values[i])
	}
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ConfigStatusApplyConfiguration) WithVersion(value string) *ConfigStatusApplyConfiguration {
	b.Version = &value
	return b
}
