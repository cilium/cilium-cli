{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    ':gitSignOff',
    'helpers:pinGitHubActionDigests',
  ],

  // This ensures that the gitAuthor and gitSignOff fields match
  gitAuthor: 'renovate[bot] <bot@renovateapp.com>',
  includePaths: [
    '.github/workflows/**',
    'action.yaml',
    'defaults/defaults.go',
    'go.mod',
    'go.sum',
    'Dockerfile',
    'Makefile',
  ],
  postUpdateOptions: [
    'gomodTidy',
  ],
  pinDigests: true,
  ignorePresets: [
    ':prHourlyLimit2',
  ],
  separateMajorMinor: true,
  separateMultipleMajor: true,
  separateMinorPatch: true,
  pruneStaleBranches: true,
  baseBranches: [
    'main',
  ],
  vulnerabilityAlerts: {
    enabled: true,
  },
  labels: [
    'renovate/stop-updating',
    'kind/enhancement',
    'priority/release-blocker',
  ],
  stopUpdatingLabel: 'renovate/stop-updating',
  packageRules: [
    {
      groupName: 'all github action dependencies',
      groupSlug: 'all-github-action',
      matchFileNames: [
        '.github/workflows/**',
        'action.yaml',
      ],
      matchUpdateTypes: [
        'major',
        'minor',
        'digest',
        'patch',
        'pin',
        'pinDigest',
      ],
    },
    {
      // Avoid updating patch releases of golang in go.mod
      enabled: 'false',
      matchFileNames: [
        'go.mod',
      ],
      matchDepNames: [
        'go',
      ],
      matchDatasources: [
        'golang-version',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      matchBaseBranches: [
        'main',
      ],
    },
    {
      // Images that directly use docker.io/library/golang for building.
      groupName: 'golang-images',
      matchFileNames: [
        'Dockerfile',
        'Makefile',
      ],
    },
    {
      groupName: 'Go',
      matchDepNames: [
        'go',
        'docker.io/library/golang',
      ],
      schedule: [
        'on friday',
      ],
    },
    {
      // Group golangci-lint updates to overrule grouping of version updates in the GHA files.
      // Without this, golangci-lint updates are not in sync for GHA files and other usages.
      groupName: 'golangci-lint',
      matchDepNames: [
        'golangci/golangci-lint',
      ],
    },
    {
      // Group cilium updates to overrule grouping of version updates in the GHA files.
      // Without this, cilium updates are not in sync for GHA files and other usages.
      groupName: 'cilium',
      matchDepNames: [
        'cilium/cilium',
      ],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      fileMatch: [
        '^\\.github/workflows/[^/]+\\.yaml$',
        '^action.yaml$',
      ],

      // This regex manages version strings in GitHub actions workflow files,
      // similar to the examples shown here:
      //   https://docs.renovatebot.com/modules/manager/regex/#advanced-capture
      matchStrings: [
        '# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)\\s+.+version: (?<currentValue>.*)',
      ],
    },
    {
      customType: 'regex',
      fileMatch: [
        '^Makefile$',
      ],

      // This regex manages version strings in the Makefile,
      // similar to the examples shown here:
      //   https://docs.renovatebot.com/modules/manager/regex/#advanced-capture
      matchStrings: [
        '# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)\\s+.+_VERSION = (?<currentValue>.*)\\s+.+_SHA = (?<currentDigest>sha256:[a-f0-9]+)',
      ],
    },
    {
      customType: 'regex',
      fileMatch: [
        '^go\\.mod$',
      ],
      matchStrings: [
        '// renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)\\s+go (?<currentValue>.*)',
      ],
    },
  ],
}
